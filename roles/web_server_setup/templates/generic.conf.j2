# Upgrade WebSocket if requested, otherwise use keepalive
map $http_upgrade $connection_upgrade_keepalive {
    default upgrade;
    ''      '';
}
upstream {{item}}_upstream {
    server localhost:{{web_server_setup_ports_mapping[item]}};
}

server {
    # HTTP server config
    listen 80;
    server_name {{item}}.{{ web_domain }};

    # 301 redirect to HTTPS
    location / {
            return 301 https://$host$request_uri;
    }
}
server {
    # HTTPS server config
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name {{item}}.{{ web_domain }};
    access_log off;

    # TLS certificates
    ssl_certificate /etc/letsencrypt/live/{{item}}.{{ web_domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{item}}.{{ web_domain }}/privkey.pem;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    client_max_body_size 0;
        
    location / {
        proxy_pass http{{'s' if item in web_server_setup_https_upstream}}://{{item}};
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        #proxy_buffers 10 512k;
        #proxy_buffer_size 256k;
        #proxy_busy_buffers_size 512k;
        proxy_read_timeout 90s;
        proxy_set_header Connection $connection_upgrade_keepalive;
        
{% if item in cors %}
{% for domain in cors[item] %}
        if ($http_origin = "https://{{ domain }}.{{ web_domain }}") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
{% endfor %}
{% endif %}
    }

}