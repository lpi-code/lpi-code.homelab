---
# tasks file for web_server_setup
- name: Install nginx and certbot
  dnf:
    name:
      - nginx
      - certbot
      - python3-certbot-nginx
      - python3-certbot-dns-cloudflare
    state: latest

- name: Create a dns updater user
  user:
    name: dns-updater
    state: present
    createhome: yes
    shell: /sbin/nologin
    system: yes
    home: /var/lib/dns-updater
  tags:
    - dns
    - always

- name: Template cloudflare dns updater script
  template:
    src: dns_updater.sh.j2
    dest: /var/lib/dns-updater/update_cloudflare_dns
    owner: dns-updater
    group: dns-updater
    mode: 0700
  tags:
    - dns
    - always

# - name: Generate domain list (for sites create a list of site.web_domain)
#   set_fact:
#     full_sites: "{{ full_sites | default('') }}{{ ',' if full_sites is defined else '' }}{{ item }}.{{ web_domain }}"
#   with_items: "{{ sites }}"
    
- name: Install certbot-dns-cloudflare
  dnf:
    name: python3-certbot-dns-cloudflare
    state: latest

- name: Generate cloudflare secret file
  template:
    src: cloudflare.ini.j2
    dest: /root/cloudflare.ini
    owner: root
    group: root
    mode: 0600

- name: Generate ssl certificate
  shell: 
    cmd: "{% for item in sites %}certbot certonly --dns-cloudflare-credentials /root/cloudflare.ini --dns-cloudflare -d {{ item }}.{{ web_domain }} -m {{letsencrypt_email}} --agree-tos --non-interactive --cert-name {{ item }}.{{ web_domain }} &&{% endfor %} true"
  #"certbot certonly --nginx -d {{ full_sites }} -m {{letsencrypt_email}} --agree-tos --non-interactive"
  tags:
    - certs
    - always

- name: Create cronjob
  cron:
    name: "Cloudflare DNS updater"
    user: dns-updater
    job: "/var/lib/dns-updater/update_cloudflare_dns"
    minute: "*/30"
    state: present
  tags:
    - dns
    - always

- name: Run once to create config
  shell: "/var/lib/dns-updater/update_cloudflare_dns"
  tags:
    - dns
    - always

- name: Template upstream config for nginx
  template:
    src: 01_upstream.conf.j2
    dest: /etc/nginx/conf.d/01_upstream.conf
    owner: root
    group: root
    mode: 0644
  notify: Reload nginx

- name: Make nginx load upstream config
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^    include /etc/nginx/conf.d/01_upstream.conf;'
    line: '    include /etc/nginx/conf.d/01_upstream.conf;'
    state: present
    insertafter: 'http {'
  notify: Reload nginx

- name: Add to cron to renew certificate every month
  cron:
    name: "Letsencrypt renewal of {{item}}.{{web_domain}}"
    user: root
    job: "certbot certonly --nginx -d {{item}}.{{web_domain}} -m {{letsencrypt_email}} --agree-tos --non-interactive"
    minute: "0"
    hour: "0"
    day: "1"
    month: "*"
    state: present
  with_items: "{{ sites }}"
  tags:
    - certs
    - always

- name: Add sites-available and sites-enabled
  file:
    path: /etc/nginx/{{item}}
    state: directory
  with_items:
    - sites-available
    - sites-enabled

- name: Add sites-enabled to nginx.conf in http block
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^    include /etc/nginx/sites-enabled/\*;'
    line: '    include /etc/nginx/sites-enabled/*.conf;'
    state: present
    insertafter: 'http {'
  notify: Reload nginx

- name: Start and enable nginx
  systemd:
    name: nginx
    state: started
    enabled: yes

- name: Template server sites conf
  template:
    src: "{{item}}.conf.j2"
    dest: /etc/nginx/sites-available/{{item}}.conf
  notify: Reload nginx
  with_items: "{{ sites }}"
  when: item not in web_server_setup_ports_mapping and item not in web_server_setup_proxied_by_authentik

- name: Template generic sites conf
  template:
    src: generic.conf.j2
    dest: /etc/nginx/sites-available/{{item}}.conf
  notify: Reload nginx
  with_items: "{{ sites }}"
  when: item in web_server_setup_ports_mapping and item not in web_server_setup_proxied_by_authentik

- name: Template proxied sites conf
  template:
    src: proxied_by_authentik.conf.j2
    dest: /etc/nginx/sites-available/{{item}}.conf
  notify: Reload nginx
  with_items: "{{ sites }}"
  when: item in web_server_setup_proxied_by_authentik

- name: Enable sites 
  file:
    src: /etc/nginx/sites-available/{{item}}.conf
    dest: /etc/nginx/sites-enabled/{{item}}.conf
    state: link
  with_items: "{{ sites }}"

